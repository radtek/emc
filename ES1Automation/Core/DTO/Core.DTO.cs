//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2013/11/26 - 10:43:03
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using Core.Model;

namespace Core.DTO
{

    /// <summary>
    /// Assembler for <see cref="DiagnosticLog"/> and <see cref="DiagnosticLogDTO"/>.
    /// </summary>
    public static partial class DiagnosticLogAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="DiagnosticLogDTO"/> converted from <see cref="DiagnosticLog"/>.</param>
        static partial void OnDTO(this DiagnosticLog entity, DiagnosticLogDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="DiagnosticLog"/> converted from <see cref="DiagnosticLogDTO"/>.</param>
        static partial void OnEntity(this DiagnosticLogDTO dto, DiagnosticLog entity);

        /// <summary>
        /// Converts this instance of <see cref="DiagnosticLogDTO"/> to an instance of <see cref="DiagnosticLog"/>.
        /// </summary>
        /// <param name="dto"><see cref="DiagnosticLogDTO"/> to convert.</param>
        public static DiagnosticLog ToEntity(this DiagnosticLogDTO dto)
        {
            if (dto == null) return null;

            var entity = new DiagnosticLog();

            entity.LogId = dto.LogId;
            entity.LogType = dto.LogType;
            entity.Component = dto.Component;
            entity.Message = dto.Message;
            entity.CreateTime = dto.CreateTime;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="DiagnosticLog"/> to an instance of <see cref="DiagnosticLogDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="DiagnosticLog"/> to convert.</param>
        public static DiagnosticLogDTO ToDTO(this DiagnosticLog entity)
        {
            if (entity == null) return null;

            var dto = new DiagnosticLogDTO();

            dto.LogId = entity.LogId;
            if (entity.LogType != null)
            {
                dto.LogType = entity.LogType.Value;
            }
            dto.Message = entity.Message;
            dto.Component = entity.Component;
            if (entity.CreateTime != null)
            {
                dto.CreateTime = entity.CreateTime.Value;
            }

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="DiagnosticLogDTO"/> to an instance of <see cref="DiagnosticLog"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<DiagnosticLog> ToEntities(this IEnumerable<DiagnosticLogDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="DiagnosticLog"/> to an instance of <see cref="DiagnosticLogDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<DiagnosticLogDTO> ToDTOs(this IEnumerable<DiagnosticLog> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="Subscriber"/> and <see cref="SubscriberDTO"/>.
    /// </summary>
    public static partial class SubscriberAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="SubscriberDTO"/> converted from <see cref="Subscriber"/>.</param>
        static partial void OnDTO(this Subscriber entity, SubscriberDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="Subscriber"/> converted from <see cref="SubscriberDTO"/>.</param>
        static partial void OnEntity(this SubscriberDTO dto, Subscriber entity);

        /// <summary>
        /// Converts this instance of <see cref="SubscriberDTO"/> to an instance of <see cref="Subscriber"/>.
        /// </summary>
        /// <param name="dto"><see cref="SubscriberDTO"/> to convert.</param>
        public static Subscriber ToEntity(this SubscriberDTO dto)
        {
            if (dto == null) return null;

            var entity = new Subscriber();

            entity.SubscriberId = dto.SubscriberId;
            entity.UserId = dto.UserId;
            entity.ProjectId = dto.ProjectId;
            entity.Description = dto.Description;
            entity.SubscriberType = dto.SubscriberType;
            entity.CreateTime = dto.CreateTime;


            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="Subscriber"/> to an instance of <see cref="SubscriberDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="Subscriber"/> to convert.</param>
        public static SubscriberDTO ToDTO(this Subscriber entity)
        {
            if (entity == null) return null;

            var dto = new SubscriberDTO();

            dto.SubscriberId = entity.SubscriberId;
            dto.UserId = entity.UserId;
            dto.ProjectId = entity.ProjectId;
            dto.Description = entity.Description;
            dto.SubscriberType = entity.SubscriberType;
            dto.CreateTime = entity.CreateTime;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="SubscriberDTO"/> to an instance of <see cref="Subscriber"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<Subscriber> ToEntities(this IEnumerable<SubscriberDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="Subscriber"/> to an instance of <see cref="SubscriberDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<SubscriberDTO> ToDTOs(this IEnumerable<Subscriber> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="Ranking"/> and <see cref="RankingDTO"/>.
    /// </summary>
    public static partial class RankingAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="RankingDTO"/> converted from <see cref="Ranking"/>.</param>
        static partial void OnDTO(this Ranking entity, RankingDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="Ranking"/> converted from <see cref="RankingDTO"/>.</param>
        static partial void OnEntity(this RankingDTO dto, Ranking entity);

        /// <summary>
        /// Converts this instance of <see cref="RankingDTO"/> to an instance of <see cref="Ranking"/>.
        /// </summary>
        /// <param name="dto"><see cref="RankingDTO"/> to convert.</param>
        public static Ranking ToEntity(this RankingDTO dto)
        {
            if (dto == null) return null;

            var entity = new Ranking();

            entity.RankingId = dto.RankingId;
            entity.Name = dto.Name;
            entity.Description = dto.Description;


            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="Ranking"/> to an instance of <see cref="RankingDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="Ranking"/> to convert.</param>
        public static RankingDTO ToDTO(this Ranking entity)
        {
            if (entity == null) return null;

            var dto = new RankingDTO();

            dto.RankingId = entity.RankingId;
            dto.Name = entity.Name;
            dto.Description = entity.Description;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="RankingDTO"/> to an instance of <see cref="Ranking"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<Ranking> ToEntities(this IEnumerable<RankingDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="Ranking"/> to an instance of <see cref="RankingDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<RankingDTO> ToDTOs(this IEnumerable<Ranking> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="Release"/> and <see cref="ReleaseDTO"/>.
    /// </summary>
    public static partial class ReleaseAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="ReleaseDTO"/> converted from <see cref="Release"/>.</param>
        static partial void OnDTO(this Release entity, ReleaseDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="Release"/> converted from <see cref="ReleaseDTO"/>.</param>
        static partial void OnEntity(this ReleaseDTO dto, Release entity);

        /// <summary>
        /// Converts this instance of <see cref="ReleaseDTO"/> to an instance of <see cref="Release"/>.
        /// </summary>
        /// <param name="dto"><see cref="ReleaseDTO"/> to convert.</param>
        public static Release ToEntity(this ReleaseDTO dto)
        {
            if (dto == null) return null;

            var entity = new Release();

            entity.ReleaseId = dto.ReleaseId;
            entity.Name = dto.Name;
            entity.Path = dto.Path;
            entity.Description = dto.Description;
            entity.ProductId = dto.ProductId;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="Release"/> to an instance of <see cref="ReleaseDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="Release"/> to convert.</param>
        public static ReleaseDTO ToDTO(this Release entity)
        {
            if (entity == null) return null;

            var dto = new ReleaseDTO();

            dto.ReleaseId = entity.ReleaseId;
            dto.Name = entity.Name;
            dto.Description = entity.Description;
            dto.Path = entity.Path;
            dto.ProductId = entity.ProductId;


            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="ReleaseDTO"/> to an instance of <see cref="Release"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<Release> ToEntities(this IEnumerable<ReleaseDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="Release"/> to an instance of <see cref="ReleaseDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<ReleaseDTO> ToDTOs(this IEnumerable<Release> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="Branch"/> and <see cref="BranchDTO"/>.
    /// </summary>
    public static partial class BranchAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="BranchDTO"/> converted from <see cref="Branch"/>.</param>
        static partial void OnDTO(this Branch entity, BranchDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="Branch"/> converted from <see cref="BranchDTO"/>.</param>
        static partial void OnEntity(this BranchDTO dto, Branch entity);

        /// <summary>
        /// Converts this instance of <see cref="BranchDTO"/> to an instance of <see cref="Branch"/>.
        /// </summary>
        /// <param name="dto"><see cref="BranchDTO"/> to convert.</param>
        public static Branch ToEntity(this BranchDTO dto)
        {
            if (dto == null) return null;

            var entity = new Branch();

            entity.BranchId = dto.BranchId;
            entity.Name = dto.Name;
            entity.Path = dto.Path;
            entity.Description = dto.Description;
            entity.ProductId = dto.ProductId;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="Branch"/> to an instance of <see cref="BranchDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="Branch"/> to convert.</param>
        public static BranchDTO ToDTO(this Branch entity)
        {
            if (entity == null) return null;

            var dto = new BranchDTO();

            dto.BranchId = entity.BranchId;
            dto.Name = entity.Name;
            dto.Description = entity.Description;
            dto.Path = entity.Path;
            dto.ProductId = entity.ProductId;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="BranchDTO"/> to an instance of <see cref="Branch"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<Branch> ToEntities(this IEnumerable<BranchDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="Branch"/> to an instance of <see cref="BranchDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<BranchDTO> ToDTOs(this IEnumerable<Branch> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="AutomationTask"/> and <see cref="AutomationTaskDTO"/>.
    /// </summary>
    public static partial class AutomationTaskAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="AutomationTaskDTO"/> converted from <see cref="AutomationTask"/>.</param>
        static partial void OnDTO(this AutomationTask entity, AutomationTaskDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="AutomationTask"/> converted from <see cref="AutomationTaskDTO"/>.</param>
        static partial void OnEntity(this AutomationTaskDTO dto, AutomationTask entity);

        /// <summary>
        /// Converts this instance of <see cref="AutomationTaskDTO"/> to an instance of <see cref="AutomationTask"/>.
        /// </summary>
        /// <param name="dto"><see cref="AutomationTaskDTO"/> to convert.</param>
        public static AutomationTask ToEntity(this AutomationTaskDTO dto)
        {
            if (dto == null) return null;

            var entity = new AutomationTask();

            entity.TaskId = dto.TaskId;
            entity.Name = dto.Name;
            entity.Status = dto.Status;
            entity.Type = dto.Type;
            entity.Priority = dto.Priority;
            entity.CreateDate = dto.CreateDate;
            entity.CreateBy = dto.CreateBy;
            entity.ModifyDate = dto.ModifyDate;
            entity.ModifyBy = dto.ModifyBy;
            entity.BuildId = dto.BuildId;
            entity.EnvironmentId = dto.EnvironmentId;
            entity.TestContent = dto.TestContent;
            entity.Information = dto.Information;
            entity.Description = dto.Description;
            entity.RecurrencePattern = dto.RecurrencePattern;
            entity.StartDate = dto.StartDate;
            entity.StartTime = dto.StartTime;
            entity.WeekDays = dto.WeekDays;
            entity.WeekInterval = dto.WeekInterval;
            entity.ParentTaskId = dto.ParentTaskId;
            entity.BranchId = dto.BranchId;
            entity.ReleaseId = dto.ReleaseId;
            entity.ProductId = dto.ProductId;
            entity.ProjectId = dto.ProjectId;
            entity.WriteTestResultBack = dto.WriteTestResultBack;
            entity.NotifyStakeholders = dto.NotifyStakeholders;
            entity.SetupScript = dto.SetupScript;
            entity.TeardownScript = dto.TeardownScript;
            entity.EnableCodeCoverage = dto.EnableCodeCoverage;
            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="AutomationTask"/> to an instance of <see cref="AutomationTaskDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="AutomationTask"/> to convert.</param>
        public static AutomationTaskDTO ToDTO(this AutomationTask entity)
        {
            if (entity == null) return null;

            var dto = new AutomationTaskDTO();

            dto.TaskId = entity.TaskId;
            dto.Name = entity.Name;
            dto.Status = entity.Status;
            dto.Type = entity.Type;
            dto.Priority = entity.Priority;
            dto.CreateDate = entity.CreateDate;
            dto.CreateBy = entity.CreateBy;
            dto.ModifyDate = entity.ModifyDate;
            dto.ModifyBy = entity.ModifyBy;
            dto.BuildId = entity.BuildId;
            dto.EnvironmentId = entity.EnvironmentId;
            dto.TestContent = entity.TestContent;
            dto.Information = entity.Information;
            dto.Description = entity.Description;
            dto.RecurrencePattern = entity.RecurrencePattern.Value;
            dto.StartDate = entity.StartDate.Value;
            dto.StartTime = entity.StartTime.Value;
            dto.WeekDays = entity.WeekDays.Value;
            dto.WeekInterval = entity.WeekInterval.Value;
            if (entity.ParentTaskId != null)
            {
                dto.ParentTaskId = entity.ParentTaskId.Value;
            }
            if (entity.BranchId != null)
            {
                dto.BranchId = entity.BranchId.Value;
            }
            if (entity.ReleaseId != null)
            {
                dto.ReleaseId = entity.ReleaseId.Value;
            }
            if (entity.ProductId != null)
            {
                dto.ProductId = entity.ProductId.Value;
            }
            if (entity.ProjectId != null)
            {
                dto.ProjectId = entity.ProjectId.Value;
            }

            dto.NotifyStakeholders = entity.NotifyStakeholders.HasValue ? entity.NotifyStakeholders.Value : false;
            dto.WriteTestResultBack = entity.WriteTestResultBack.HasValue ? entity.WriteTestResultBack.Value : false;
            dto.SetupScript = entity.SetupScript;
            dto.TeardownScript = entity.TeardownScript;
            dto.EnableCodeCoverage = entity.EnableCodeCoverage.HasValue ? entity.EnableCodeCoverage.Value : false;
            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="AutomationTaskDTO"/> to an instance of <see cref="AutomationTask"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<AutomationTask> ToEntities(this IEnumerable<AutomationTaskDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="AutomationTask"/> to an instance of <see cref="AutomationTaskDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<AutomationTaskDTO> ToDTOs(this IEnumerable<AutomationTask> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="Product"/> and <see cref="ProductDTO"/>.
    /// </summary>
    public static partial class ProductAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="ProductDTO"/> converted from <see cref="Product"/>.</param>
        static partial void OnDTO(this Product entity, ProductDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="Product"/> converted from <see cref="ProductDTO"/>.</param>
        static partial void OnEntity(this ProductDTO dto, Product entity);

        /// <summary>
        /// Converts this instance of <see cref="ProductDTO"/> to an instance of <see cref="Product"/>.
        /// </summary>
        /// <param name="dto"><see cref="ProductDTO"/> to convert.</param>
        public static Product ToEntity(this ProductDTO dto)
        {
            if (dto == null) return null;

            var entity = new Product();

            entity.ProductId = dto.ProductId;
            entity.Name = dto.Name;
            entity.Description = dto.Description;
            entity.BuildProviderId = dto.BuildProviderId;
            entity.EnvironmentProviderId = dto.EnvironmentProviderId;
            entity.TestCaseProviderId = dto.TestCaseProviderId;
            entity.RunTime = dto.RunTime;
            entity.RQMProjectAlias = dto.RQMProjectAlias;


            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="Product"/> to an instance of <see cref="ProductDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="Product"/> to convert.</param>
        public static ProductDTO ToDTO(this Product entity)
        {
            if (entity == null) return null;

            var dto = new ProductDTO();

            dto.ProductId = entity.ProductId;
            dto.Name = entity.Name;
            dto.Description = entity.Description;            
            if (entity.BuildProviderId != null)
            {
                dto.BuildProviderId = entity.BuildProviderId.Value;
            }
            if (entity.EnvironmentProviderId != null)
            {
                dto.EnvironmentProviderId = entity.EnvironmentProviderId.Value;
            }
            if (entity.TestCaseProviderId != null)
            {
                dto.TestCaseProviderId = entity.TestCaseProviderId.Value;
            }
            dto.RunTime = entity.RunTime;
            if (entity.RQMProjectAlias != null)
            {
                dto.RQMProjectAlias = entity.RQMProjectAlias;
            }

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="ProductDTO"/> to an instance of <see cref="Product"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<Product> ToEntities(this IEnumerable<ProductDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="Product"/> to an instance of <see cref="ProductDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<ProductDTO> ToDTOs(this IEnumerable<Product> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="Project"/> and <see cref="ProjectDTO"/>.
    /// </summary>
    public static partial class ProjectAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="ProductDTO"/> converted from <see cref="Product"/>.</param>
        static partial void OnDTO(this Project entity, ProjectDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="Product"/> converted from <see cref="ProductDTO"/>.</param>
        static partial void OnEntity(this ProjectDTO dto, Project entity);

        /// <summary>
        /// Converts this instance of <see cref="ProductDTO"/> to an instance of <see cref="Product"/>.
        /// </summary>
        /// <param name="dto"><see cref="ProductDTO"/> to convert.</param>
        public static Project ToEntity(this ProjectDTO dto)
        {
            if (dto == null) return null;

            var entity = new Project();

            entity.ProjectId = dto.ProjectId;
            entity.Name = dto.Name;
            entity.Description = dto.Description;
            entity.VCSType = dto.VCSType;
            entity.VCSServer = dto.VCSServer;
            entity.VCSUser = dto.VCSUser;
            entity.VCSPassword = dto.VCSPassword;
            entity.VCSRootPath = dto.VCSRootPath;
            entity.RunTime = dto.RunTime;


            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="Product"/> to an instance of <see cref="ProductDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="Product"/> to convert.</param>
        public static ProjectDTO ToDTO(this Project entity)
        {
            if (entity == null) return null;

            var dto = new ProjectDTO();

            dto.ProjectId = entity.ProjectId;
            dto.Name = entity.Name;
            dto.Description = entity.Description;
            if (entity.VCSType != null)
            {
                dto.VCSType = entity.VCSType.Value;
            }
            dto.VCSServer = entity.VCSServer;
            dto.VCSUser = entity.VCSUser;
            dto.VCSPassword = entity.VCSPassword;
            dto.VCSRootPath = entity.VCSRootPath;            
            dto.RunTime = entity.RunTime;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="ProductDTO"/> to an instance of <see cref="Product"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<Project> ToEntities(this IEnumerable<ProjectDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="Product"/> to an instance of <see cref="ProductDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<ProjectDTO> ToDTOs(this IEnumerable<Project> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }


    /// <summary>
    /// Assembler for <see cref="ProductEnvironmentMap"/> and <see cref="ProductEnvironmentMapDTO"/>.
    /// </summary>
    public static partial class ProjectEnvironmentMapAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="ProductEnvironmentMapDTO"/> converted from <see cref="ProductEnvironmentMap"/>.</param>
        static partial void OnDTO(this ProjectEnvironmentMap entity, ProjectEnvironmentMapDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="ProductEnvironmentMap"/> converted from <see cref="ProductEnvironmentMapDTO"/>.</param>
        static partial void OnEntity(this ProjectEnvironmentMapDTO dto, ProjectEnvironmentMap entity);

        /// <summary>
        /// Converts this instance of <see cref="ProductEnvironmentMapDTO"/> to an instance of <see cref="ProductEnvironmentMap"/>.
        /// </summary>
        /// <param name="dto"><see cref="ProductEnvironmentMapDTO"/> to convert.</param>
        public static ProjectEnvironmentMap ToEntity(this ProjectEnvironmentMapDTO dto)
        {
            if (dto == null) return null;

            var entity = new ProjectEnvironmentMap();

            entity.MapId = dto.MapId;
            entity.ProjectId = dto.ProjectId;
            entity.EnvironmentId = dto.EnvironmentId;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="ProductEnvironmentMap"/> to an instance of <see cref="ProductEnvironmentMapDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="ProductEnvironmentMap"/> to convert.</param>
        public static ProjectEnvironmentMapDTO ToDTO(this ProjectEnvironmentMap entity)
        {
            if (entity == null) return null;

            var dto = new ProjectEnvironmentMapDTO();

            dto.MapId = entity.MapId;
            dto.ProjectId = entity.ProjectId;
            dto.EnvironmentId = entity.EnvironmentId;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="ProductEnvironmentMapDTO"/> to an instance of <see cref="ProductEnvironmentMap"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<ProjectEnvironmentMap> ToEntities(this IEnumerable<ProjectEnvironmentMapDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="ProductEnvironmentMap"/> to an instance of <see cref="ProductEnvironmentMapDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<ProjectEnvironmentMapDTO> ToDTOs(this IEnumerable<ProjectEnvironmentMap> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="SupportedEnvironment"/> and <see cref="SupportedEnvironmentDTO"/>.
    /// </summary>
    public static partial class SupportedEnvironmentAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="SupportedEnvironmentDTO"/> converted from <see cref="SupportedEnvironment"/>.</param>
        static partial void OnDTO(this SupportedEnvironment entity, SupportedEnvironmentDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="SupportedEnvironment"/> converted from <see cref="SupportedEnvironmentDTO"/>.</param>
        static partial void OnEntity(this SupportedEnvironmentDTO dto, SupportedEnvironment entity);

        /// <summary>
        /// Converts this instance of <see cref="SupportedEnvironmentDTO"/> to an instance of <see cref="SupportedEnvironment"/>.
        /// </summary>
        /// <param name="dto"><see cref="SupportedEnvironmentDTO"/> to convert.</param>
        public static SupportedEnvironment ToEntity(this SupportedEnvironmentDTO dto)
        {
            if (dto == null) return null;

            var entity = new SupportedEnvironment();

            entity.EnvironmentId = dto.EnvironmentId;
            entity.Name = dto.Name;
            entity.Description = dto.Description;
            entity.Config = dto.Config;
            entity.ProviderId = dto.ProviderId;
            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="SupportedEnvironment"/> to an instance of <see cref="SupportedEnvironmentDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="SupportedEnvironment"/> to convert.</param>
        public static SupportedEnvironmentDTO ToDTO(this SupportedEnvironment entity)
        {
            if (entity == null) return null;

            var dto = new SupportedEnvironmentDTO();

            dto.EnvironmentId = entity.EnvironmentId;
            dto.Name = entity.Name;
            dto.Description = entity.Description;
            dto.Config = entity.Config;
            dto.ProviderId = entity.ProviderId;
            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="SupportedEnvironmentDTO"/> to an instance of <see cref="SupportedEnvironment"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<SupportedEnvironment> ToEntities(this IEnumerable<SupportedEnvironmentDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="SupportedEnvironment"/> to an instance of <see cref="SupportedEnvironmentDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<SupportedEnvironmentDTO> ToDTOs(this IEnumerable<SupportedEnvironment> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="User"/> and <see cref="UserDTO"/>.
    /// </summary>
    public static partial class UserAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="UserDTO"/> converted from <see cref="User"/>.</param>
        static partial void OnDTO(this User entity, UserDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="User"/> converted from <see cref="UserDTO"/>.</param>
        static partial void OnEntity(this UserDTO dto, User entity);

        /// <summary>
        /// Converts this instance of <see cref="UserDTO"/> to an instance of <see cref="User"/>.
        /// </summary>
        /// <param name="dto"><see cref="UserDTO"/> to convert.</param>
        public static User ToEntity(this UserDTO dto)
        {
            if (dto == null) return null;

            var entity = new User();

            entity.UserId = dto.UserId;
            entity.Type = dto.Type;
            entity.Username = dto.Username;
            entity.Password = dto.Password;
            entity.Role = dto.Role;
            entity.IsActive = dto.IsActive;
            entity.Description = dto.Description;
            entity.Email = dto.Email;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="User"/> to an instance of <see cref="UserDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="User"/> to convert.</param>
        public static UserDTO ToDTO(this User entity)
        {
            if (entity == null) return null;

            var dto = new UserDTO();

            dto.UserId = entity.UserId;
            dto.Type = entity.Type;
            dto.Username = entity.Username;
            dto.Password = entity.Password;
            dto.Role = entity.Role;
            dto.IsActive = entity.IsActive;
            dto.Description = entity.Description;
            dto.Email = entity.Email;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="UserDTO"/> to an instance of <see cref="User"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<User> ToEntities(this IEnumerable<UserDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="User"/> to an instance of <see cref="UserDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<UserDTO> ToDTOs(this IEnumerable<User> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="AutomationJob"/> and <see cref="AutomationJobDTO"/>.
    /// </summary>
    public static partial class AutomationJobAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="AutomationJobDTO"/> converted from <see cref="AutomationJob"/>.</param>
        static partial void OnDTO(this AutomationJob entity, AutomationJobDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="AutomationJob"/> converted from <see cref="AutomationJobDTO"/>.</param>
        static partial void OnEntity(this AutomationJobDTO dto, AutomationJob entity);

        /// <summary>
        /// Converts this instance of <see cref="AutomationJobDTO"/> to an instance of <see cref="AutomationJob"/>.
        /// </summary>
        /// <param name="dto"><see cref="AutomationJobDTO"/> to convert.</param>
        public static AutomationJob ToEntity(this AutomationJobDTO dto)
        {
            if (dto == null) return null;

            var entity = new AutomationJob();

            entity.JobId = dto.JobId;
            entity.Name = dto.Name;
            entity.Type = dto.Type;
            entity.Priority = dto.Priority;
            entity.Status = dto.Status;
            entity.RetryTimes = dto.RetryTimes;
            entity.CreateDate = dto.CreateDate;
            entity.CreateBy = dto.CreateBy;
            entity.ModifyDate = dto.ModifyDate;
            entity.ModifyBy = dto.ModifyBy;
            entity.SUTEnvironmentId = dto.SUTEnvironmentId;
            entity.TestAgentEnvironmentId = dto.TestAgentEnvironmentId;
            entity.Timeout = dto.Timeout;
            entity.Description = dto.Description;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="AutomationJob"/> to an instance of <see cref="AutomationJobDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="AutomationJob"/> to convert.</param>
        public static AutomationJobDTO ToDTO(this AutomationJob entity)
        {
            if (entity == null) return null;

            var dto = new AutomationJobDTO();

            dto.JobId = entity.JobId;
            dto.Name = entity.Name;
            dto.Type = entity.Type;
            dto.Priority = entity.Priority;
            dto.Status = entity.Status;
            dto.RetryTimes = entity.RetryTimes;
            dto.CreateDate = entity.CreateDate;
            dto.CreateBy = entity.CreateBy;
            dto.ModifyDate = entity.ModifyDate;
            dto.ModifyBy = entity.ModifyBy;
            dto.SUTEnvironmentId = entity.SUTEnvironmentId == null ? 0 : entity.SUTEnvironmentId.Value;
            dto.TestAgentEnvironmentId = entity.TestAgentEnvironmentId == null ? 0 : entity.TestAgentEnvironmentId.Value;
            dto.Timeout = entity.Timeout.Value;
            dto.Description = entity.Description;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="AutomationJobDTO"/> to an instance of <see cref="AutomationJob"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<AutomationJob> ToEntities(this IEnumerable<AutomationJobDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="AutomationJob"/> to an instance of <see cref="AutomationJobDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<AutomationJobDTO> ToDTOs(this IEnumerable<AutomationJob> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="TaskJobMap"/> and <see cref="TaskJobMapDTO"/>.
    /// </summary>
    public static partial class TaskJobMapAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="TaskJobMapDTO"/> converted from <see cref="TaskJobMap"/>.</param>
        static partial void OnDTO(this TaskJobMap entity, TaskJobMapDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="TaskJobMap"/> converted from <see cref="TaskJobMapDTO"/>.</param>
        static partial void OnEntity(this TaskJobMapDTO dto, TaskJobMap entity);

        /// <summary>
        /// Converts this instance of <see cref="TaskJobMapDTO"/> to an instance of <see cref="TaskJobMap"/>.
        /// </summary>
        /// <param name="dto"><see cref="TaskJobMapDTO"/> to convert.</param>
        public static TaskJobMap ToEntity(this TaskJobMapDTO dto)
        {
            if (dto == null) return null;

            var entity = new TaskJobMap();

            entity.MapId = dto.MapId;
            entity.TaskId = dto.TaskId;
            entity.JobId = dto.JobId;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="TaskJobMap"/> to an instance of <see cref="TaskJobMapDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="TaskJobMap"/> to convert.</param>
        public static TaskJobMapDTO ToDTO(this TaskJobMap entity)
        {
            if (entity == null) return null;

            var dto = new TaskJobMapDTO();

            dto.MapId = entity.MapId;
            dto.TaskId = entity.TaskId;
            dto.JobId = entity.JobId;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="TaskJobMapDTO"/> to an instance of <see cref="TaskJobMap"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<TaskJobMap> ToEntities(this IEnumerable<TaskJobMapDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="TaskJobMap"/> to an instance of <see cref="TaskJobMapDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<TaskJobMapDTO> ToDTOs(this IEnumerable<TaskJobMap> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="Build"/> and <see cref="BuildDTO"/>.
    /// </summary>
    public static partial class BuildAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="BuildDTO"/> converted from <see cref="Build"/>.</param>
        static partial void OnDTO(this Build entity, BuildDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="Build"/> converted from <see cref="BuildDTO"/>.</param>
        static partial void OnEntity(this BuildDTO dto, Build entity);

        /// <summary>
        /// Converts this instance of <see cref="BuildDTO"/> to an instance of <see cref="Build"/>.
        /// </summary>
        /// <param name="dto"><see cref="BuildDTO"/> to convert.</param>
        public static Build ToEntity(this BuildDTO dto)
        {
            if (dto == null) return null;

            var entity = new Build();

            entity.BuildId = dto.BuildId;
            entity.ProviderId = dto.ProviderId;
            entity.ProductId = dto.ProductId;
            entity.Name = dto.Name;
            entity.Type = dto.Type;
            entity.Status = dto.Status;
            if (Branch.GetBranchByName(dto.Branch) != null)
            {
                entity.BranchId = Branch.GetBranchByName(dto.Branch).BranchId;
            }
            if (Release.GetReleaseByName(dto.Release) != null)
            {
                entity.ReleaseId = Release.GetReleaseByName(dto.Release).ReleaseId;
            }
            entity.Number = dto.Number;
            entity.Location = dto.Location;
            entity.Description = dto.Description;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="Build"/> to an instance of <see cref="BuildDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="Build"/> to convert.</param>
        public static BuildDTO ToDTO(this Build entity)
        {
            if (entity == null) return null;

            var dto = new BuildDTO();

            dto.BuildId = entity.BuildId;
            dto.ProviderId = entity.ProviderId;
            dto.ProductId = entity.ProductId;
            dto.Name = entity.Name;
            dto.Type = entity.Type;
            dto.Status = entity.Status;
            if (entity.BranchId != null)
            {
                dto.Branch = Branch.GetBranchById(entity.BranchId.Value).Name;
            }
            if (entity.ReleaseId != null)
            {
                dto.Release = Release.GetReleaseById(entity.ReleaseId.Value).Name;
            }
            dto.Number = entity.Number;
            dto.Location = entity.Location;
            dto.Description = entity.Description;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="BuildDTO"/> to an instance of <see cref="Build"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<Build> ToEntities(this IEnumerable<BuildDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="Build"/> to an instance of <see cref="BuildDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<BuildDTO> ToDTOs(this IEnumerable<Build> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="TestEnvironment"/> and <see cref="TestEnvironmentDTO"/>.
    /// </summary>
    public static partial class TestEnvironmentAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="TestEnvironmentDTO"/> converted from <see cref="TestEnvironment"/>.</param>
        static partial void OnDTO(this TestEnvironment entity, TestEnvironmentDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="TestEnvironment"/> converted from <see cref="TestEnvironmentDTO"/>.</param>
        static partial void OnEntity(this TestEnvironmentDTO dto, TestEnvironment entity);

        /// <summary>
        /// Converts this instance of <see cref="TestEnvironmentDTO"/> to an instance of <see cref="TestEnvironment"/>.
        /// </summary>
        /// <param name="dto"><see cref="TestEnvironmentDTO"/> to convert.</param>
        public static TestEnvironment ToEntity(this TestEnvironmentDTO dto)
        {
            if (dto == null) return null;

            var entity = new TestEnvironment();

            entity.EnvironmentId = dto.EnvironmentId;
            entity.ProviderId = dto.ProviderId;
            entity.Name = dto.Name;
            entity.Type = dto.Type;
            entity.Status = dto.Status;
            entity.CreateDate = dto.CreateDate;
            entity.ModifyDate = dto.ModifyDate;
            entity.Config = dto.Config;
            entity.Description = dto.Description;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="TestEnvironment"/> to an instance of <see cref="TestEnvironmentDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="TestEnvironment"/> to convert.</param>
        public static TestEnvironmentDTO ToDTO(this TestEnvironment entity)
        {
            if (entity == null) return null;

            var dto = new TestEnvironmentDTO();

            dto.EnvironmentId = entity.EnvironmentId;
            dto.ProviderId = entity.ProviderId;
            dto.Name = entity.Name;
            dto.Type = entity.Type;
            dto.Status = entity.Status;
            dto.CreateDate = entity.CreateDate;
            dto.ModifyDate = entity.ModifyDate;
            dto.Config = entity.Config;
            dto.Description = entity.Description;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="TestEnvironmentDTO"/> to an instance of <see cref="TestEnvironment"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<TestEnvironment> ToEntities(this IEnumerable<TestEnvironmentDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="TestEnvironment"/> to an instance of <see cref="TestEnvironmentDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<TestEnvironmentDTO> ToDTOs(this IEnumerable<TestEnvironment> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="TestCase"/> and <see cref="TestCaseDTO"/>.
    /// </summary>
    public static partial class TestCaseAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="TestCaseDTO"/> converted from <see cref="TestCase"/>.</param>
        static partial void OnDTO(this TestCase entity, TestCaseDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="TestCase"/> converted from <see cref="TestCaseDTO"/>.</param>
        static partial void OnEntity(this TestCaseDTO dto, TestCase entity);

        /// <summary>
        /// Converts this instance of <see cref="TestCaseDTO"/> to an instance of <see cref="TestCase"/>.
        /// </summary>
        /// <param name="dto"><see cref="TestCaseDTO"/> to convert.</param>
        public static TestCase ToEntity(this TestCaseDTO dto)
        {
            if (dto == null) return null;

            var entity = new TestCase();

            entity.TestCaseId = dto.TestCaseId;
            entity.SourceId = dto.SourceId;
            entity.Name = dto.Name;
            entity.ProductId = dto.ProductId;
            entity.Feature = dto.Feature;
            entity.ScriptPath = dto.ScriptPath;
            entity.Weight = dto.Weight;
            entity.Ranking = dto.Ranking;
            entity.Release = dto.Release;
            entity.IsAutomated = dto.IsAutomated;
            entity.CreateBy = dto.CreateBy;
            entity.CreateTime = dto.CreateTime;
            entity.ModifyBy = dto.ModifyBy;
            entity.ModifyTime = dto.ModifyTime;
            entity.Description = dto.Description;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="TestCase"/> to an instance of <see cref="TestCaseDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="TestCase"/> to convert.</param>
        public static TestCaseDTO ToDTO(this TestCase entity)
        {
            if (entity == null) return null;

            var dto = new TestCaseDTO();

            dto.TestCaseId = entity.TestCaseId;
            dto.SourceId = entity.SourceId;
            dto.Name = entity.Name;
            dto.ProductId = entity.ProductId;
            dto.Feature = entity.Feature;
            dto.ScriptPath = entity.ScriptPath;
            dto.Weight = entity.Weight;
            dto.Ranking = entity.Ranking;
            dto.Release = entity.Release;
            dto.IsAutomated = entity.IsAutomated;
            dto.CreateBy = entity.CreateBy;
            dto.CreateTime = entity.CreateTime;
            dto.ModifyBy = entity.ModifyBy;
            dto.ModifyTime = entity.ModifyTime;
            dto.Description = entity.Description;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="TestCaseDTO"/> to an instance of <see cref="TestCase"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<TestCase> ToEntities(this IEnumerable<TestCaseDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="TestCase"/> to an instance of <see cref="TestCaseDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<TestCaseDTO> ToDTOs(this IEnumerable<TestCase> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="Provider"/> and <see cref="ProviderDTO"/>.
    /// </summary>
    public static partial class ProviderAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="ProviderDTO"/> converted from <see cref="Provider"/>.</param>
        static partial void OnDTO(this Provider entity, ProviderDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="Provider"/> converted from <see cref="ProviderDTO"/>.</param>
        static partial void OnEntity(this ProviderDTO dto, Provider entity);

        /// <summary>
        /// Converts this instance of <see cref="ProviderDTO"/> to an instance of <see cref="Provider"/>.
        /// </summary>
        /// <param name="dto"><see cref="ProviderDTO"/> to convert.</param>
        public static Provider ToEntity(this ProviderDTO dto)
        {
            if (dto == null) return null;

            var entity = new Provider();

            entity.ProviderId = dto.ProviderId;
            entity.Name = dto.Name;
            entity.Category = dto.Category;
            entity.Type = dto.Type;
            entity.Path = dto.Path;
            entity.Config = dto.Config;
            entity.Description = dto.Description;
            entity.IsActive = dto.IsActive;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="Provider"/> to an instance of <see cref="ProviderDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="Provider"/> to convert.</param>
        public static ProviderDTO ToDTO(this Provider entity)
        {
            if (entity == null) return null;

            var dto = new ProviderDTO();

            dto.ProviderId = entity.ProviderId;
            dto.Name = entity.Name;
            dto.Category = entity.Category;
            dto.Type = entity.Type;
            dto.Path = entity.Path;
            dto.Config = entity.Config;
            dto.Description = entity.Description;
            dto.IsActive = entity.IsActive;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="ProviderDTO"/> to an instance of <see cref="Provider"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<Provider> ToEntities(this IEnumerable<ProviderDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="Provider"/> to an instance of <see cref="ProviderDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<ProviderDTO> ToDTOs(this IEnumerable<Provider> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="TestSuite"/> and <see cref="TestSuiteDTO"/>.
    /// </summary>
    public static partial class TestSuiteAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="TestSuiteDTO"/> converted from <see cref="TestSuite"/>.</param>
        static partial void OnDTO(this TestSuite entity, TestSuiteDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="TestSuite"/> converted from <see cref="TestSuiteDTO"/>.</param>
        static partial void OnEntity(this TestSuiteDTO dto, TestSuite entity);

        /// <summary>
        /// Converts this instance of <see cref="TestSuiteDTO"/> to an instance of <see cref="TestSuite"/>.
        /// </summary>
        /// <param name="dto"><see cref="TestSuiteDTO"/> to convert.</param>
        public static TestSuite ToEntity(this TestSuiteDTO dto)
        {
            if (dto == null) return null;

            var entity = new TestSuite();

            entity.SuiteId = dto.SuiteId;
            entity.Name = dto.Name;
            entity.SubSuites = dto.SubSuites;
            entity.TestCases = dto.TestCases;
            entity.CreateBy = dto.CreateBy;
            entity.CreateTime = dto.CreateTime;
            entity.ModityBy = dto.ModityBy;
            entity.ModifyTime = dto.ModifyTime;
            entity.Description = dto.Description;
            entity.ExecutionCommand = dto.ExecutionCommand;
            entity.Type = dto.Type;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="TestSuite"/> to an instance of <see cref="TestSuiteDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="TestSuite"/> to convert.</param>
        public static TestSuiteDTO ToDTO(this TestSuite entity)
        {
            if (entity == null) return null;

            var dto = new TestSuiteDTO();

            dto.SuiteId = entity.SuiteId;
            dto.Name = entity.Name;
            dto.SubSuites = entity.SubSuites;
            dto.TestCases = entity.TestCases;
            dto.CreateBy = entity.CreateBy;
            dto.CreateTime = entity.CreateTime;
            dto.ModityBy = entity.ModityBy;
            dto.ModifyTime = entity.ModifyTime;
            dto.Description = entity.Description;
            dto.Type = entity.Type;
            dto.ExecutionCommand = entity.ExecutionCommand;
            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="TestSuiteDTO"/> to an instance of <see cref="TestSuite"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<TestSuite> ToEntities(this IEnumerable<TestSuiteDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="TestSuite"/> to an instance of <see cref="TestSuiteDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<TestSuiteDTO> ToDTOs(this IEnumerable<TestSuite> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="TestCaseExecution"/> and <see cref="TestCaseExecutionDTO"/>.
    /// </summary>
    public static partial class TestCaseExecutionAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="TestCaseExecutionDTO"/> converted from <see cref="TestCaseExecution"/>.</param>
        static partial void OnDTO(this TestCaseExecution entity, TestCaseExecutionDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="TestCaseExecution"/> converted from <see cref="TestCaseExecutionDTO"/>.</param>
        static partial void OnEntity(this TestCaseExecutionDTO dto, TestCaseExecution entity);

        /// <summary>
        /// Converts this instance of <see cref="TestCaseExecutionDTO"/> to an instance of <see cref="TestCaseExecution"/>.
        /// </summary>
        /// <param name="dto"><see cref="TestCaseExecutionDTO"/> to convert.</param>
        public static TestCaseExecution ToEntity(this TestCaseExecutionDTO dto)
        {
            if (dto == null) return null;

            var entity = new TestCaseExecution();

            entity.ExecutionId = dto.ExecutionId;
            entity.TestCaseId = dto.TestCaseId;
            entity.JobId = dto.JobId;
            entity.Status = dto.Status;
            entity.StartTime = DateTime.Parse(dto.StartTime);
            entity.EndTime = DateTime.Parse(dto.EndTime);
            entity.RetryTimes = dto.RetryTimes;
            entity.Info = dto.Info;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="TestCaseExecution"/> to an instance of <see cref="TestCaseExecutionDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="TestCaseExecution"/> to convert.</param>
        public static TestCaseExecutionDTO ToDTO(this TestCaseExecution entity)
        {
            if (entity == null) return null;

            var dto = new TestCaseExecutionDTO();

            dto.ExecutionId = entity.ExecutionId;
            dto.TestCaseId = entity.TestCaseId;
            dto.JobId = entity.JobId;
            dto.Status = entity.Status;
            dto.StartTime = (entity.StartTime==null)?null:((DateTime)entity.StartTime).ToUniversalTime().ToString();
            dto.EndTime = (entity.EndTime==null)?null:((DateTime)entity.EndTime).ToUniversalTime().ToString();
            dto.RetryTimes = entity.RetryTimes;
            dto.Info = entity.Info;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="TestCaseExecutionDTO"/> to an instance of <see cref="TestCaseExecution"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<TestCaseExecution> ToEntities(this IEnumerable<TestCaseExecutionDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="TestCaseExecution"/> to an instance of <see cref="TestCaseExecutionDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<TestCaseExecutionDTO> ToDTOs(this IEnumerable<TestCaseExecution> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="TestResult"/> and <see cref="TestResultDTO"/>.
    /// </summary>
    public static partial class TestResultAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="TestResultDTO"/> converted from <see cref="TestResult"/>.</param>
        static partial void OnDTO(this TestResult entity, TestResultDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="TestResult"/> converted from <see cref="TestResultDTO"/>.</param>
        static partial void OnEntity(this TestResultDTO dto, TestResult entity);

        /// <summary>
        /// Converts this instance of <see cref="TestResultDTO"/> to an instance of <see cref="TestResult"/>.
        /// </summary>
        /// <param name="dto"><see cref="TestResultDTO"/> to convert.</param>
        public static TestResult ToEntity(this TestResultDTO dto)
        {
            if (dto == null) return null;

            var entity = new TestResult();

            entity.ResultId = dto.ResultId;
            entity.ExecutionId = dto.ExecutionId;
            entity.Result = dto.Result;
            entity.IsTriaged = dto.IsTriaged;
            entity.TriagedBy = dto.TriagedBy;
            entity.Description = dto.Description;
            entity.Files = dto.Files;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="TestResult"/> to an instance of <see cref="TestResultDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="TestResult"/> to convert.</param>
        public static TestResultDTO ToDTO(this TestResult entity)
        {
            if (entity == null) return null;

            var dto = new TestResultDTO();

            dto.ResultId = entity.ResultId;
            dto.ExecutionId = entity.ExecutionId;
            dto.Result = entity.Result;
            dto.IsTriaged = entity.IsTriaged;
            dto.TriagedBy = entity.TriagedBy;
            dto.Description = entity.Description;
            dto.Files = entity.Files;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="TestResultDTO"/> to an instance of <see cref="TestResult"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<TestResult> ToEntities(this IEnumerable<TestResultDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="TestResult"/> to an instance of <see cref="TestResultDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<TestResultDTO> ToDTOs(this IEnumerable<TestResult> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
